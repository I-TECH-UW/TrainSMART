<?php


if (($this->hasACL('pre_service')) || ($this->hasACL('admin_preservice'))){
	$navAdmin = array( // directory => array of pages (index for root)
		'country' => array( // file => label
			'index'				=> t('Country Setup'),
			'settings'			=> t('Country Setup'),
			'region'			=> t('Region Setup'),
			'region-move'		=> t('Move Regions'),
			'data-share'		=> t('Site Data Share'),
		),
		'training' => array(
			'index'				=> t('Training'),
		'settings'			=> t('Training Settings'),
		'category'			=> t('Training Category'),
			'assign-title'		=> t('Assign Titles'),
		'title'				=> t('Training Title'),
		'organizer' 		=> t('Training Organizer'),
		'level'				=> t('Training Level'),
		'topic'				=> t('Training Topic'),
			'pepfar'			=> t('PEPFAR Category'),
			'funding'			=> t('Funding'),
		'refreshercourse'   => t('Refresher Course'),
			'recommend'			=> t('Recommended Topic'),
			'gotcurriculum'		=> t('Nat. Curriculum'),
		'method'			=> t('Training Method'),
		'approvers'			=> t('Approvers'),
		),
		'people' => array(
			'index'				=> t('People'),
			'settings'			=> t('People Settings'),
		'new-people'		=> t('People Awaiting Approval'),
			'merge'				=> t('People Merge'),
			'qual'				=> t('Qualifications'),
			'responsibility'	=> t('Responsibility'),
		'types'				=> t('Trainer Types'),
		'skills'			=> t('Trainer Skills'),
			'languages'			=> t('Languages'),
			'affiliations'		=> t('Affiliations'),
			'title'				=> t('Titles'),
			'suffix'			=> t('Suffix'),
		'active-trainer'	=> t('Active Trainer'),
			'race'          => t('Race'),
		),
		'facilities' => array(
			'index'				=> t('Facilities'),
		'settings'			=> t('Facility Settings'),
		'new-facilities'	=> t('Facilities Awaiting Approval'),
		'merge'				=> t('Facilities Merge'),
		'types'				=> t('Facility Types'),
		'sponsors'			=> t('Facility Sponsors'),
		),
		'preservice' => array(
			'index'				=> t('Preservice'),
			'labels'			=> t('Field labels'),
			'classes'			=> t('Classes'),
            'class-modules'     => t('Class Modules'),
			'cadres'			=> t('Cadres'),
			'degrees'			=> t('Degrees'),
			'funding'			=> t('Funding'),
			'institutiontypes'	=> t('Institution types'),
			'languages'			=> t('Languages'),
			'nationalities'		=> t('Nationalities'),
			'joindropreasons'	=> t('Join & drop reasons'),
			'sponsors'			=> t('Sponsors'),
			//'studenttypes'		=> t('Student types'),
			'tutortypes'		=> t('Tutor types'),
			'coursetypes'		=> t('Course types'),
			'religion'			=> t('Religious denominations'),
		),
		'users' => array(
			'index'				=> t('Users'),
			'add'				=> t('Add Users'),
		'search'            => t('Edit Users')
		),
	);
	
	//TA:17: 09/02/2014
	if ( !$this->setting['display_training_category'] ) {
		unset($navAdmin['training']['category']);
	}
	if ( !$this->setting['display_training_level'] ) {
		unset($navAdmin['training']['level']);
	}
} else {
	$navAdmin = array( // directory => array of pages (index for root)
		'country' => array( // file => label
			'index'				=> t('Country Setup'),
			'settings'			=> t('Country Setup'),
			'region'			=> t('Region Setup'),
			'region-move'		=> t('Move Regions'),
			'monthly-email-reports'		=> t('Monthly Email Reports'), //TA:17:11: 10/22/2014
		),
		'training' => array(
			'index'				=> t('Training'),
		'settings'			=> t('Training Settings'),
		'category'			=> t('Training Category'),
			'assign-title'		=> t('Assign Titles'),
		'title'				=> t('Training Title'),
		'organizer' 		=> t('Training Organizer'),
		'level'				=> t('Training Level'),
		'topic'				=> t('Training Topic'),
			'pepfar'			=> t('PEPFAR Category'),
			'funding'			=> t('Funding'),
		'refreshercourse'   => t('Refresher Course'),
			'recommend'			=> t('Recommended Topic'),
			'gotcurriculum'		=> t('Nat. Curriculum'),
		'method'			=> t('Training Method'),
		'approvers'			=> t('Approvers'),
		),
		'people' => array(
			'index'				=> t('People'),
			'settings'			=> t('People Settings'),
		'new-people'		=> t('People Awaiting Approval'),
			'merge'				=> t('People Merge'),
			'qual'				=> t('Qualifications'),
			'responsibility'	=> t('Responsibility'),
		'types'				=> t('Trainer Types'),
		'skills'			=> t('Trainer Skills'),
			'languages'			=> t('Languages'),
			'affiliations'		=> t('Affiliations'),
			'title'				=> t('Titles'),
			'suffix'			=> t('Suffix'),
		'active-trainer'	=> t('Active Trainer'),
			'race'          => t('Race'),
		),
		'facilities' => array(
			'index'				=> t('Facilities'),
		'settings'			=> t('Facility Settings'),
		'new-facilities'	=> t('Facilities Awaiting Approval'),
			'merge'				=> t('Facilities Merge'),
		'types'				=> t('Facility Types'),
		'sponsors'			=> t('Facility Sponsors'),
		),
		'users' => array(
			'index'				=> t('Users'),
			'add'				=> t('Add Users'),
			'search'			=> t('Edit Users'),
	)
);

}

if (isset($this->setting['display_mod_skillsmart']) && ($this->setting['display_mod_skillsmart'] == 1)){
	$navAdmin['skillsmart'] = array(
		"index"					=> t('SkillSmart'),
		"settings"				=> t('SkillSmart Main Settings'),
		"race"					=> t('Race'),
		"disability"			=> t('Disability'),
		"professionalbodies"	=> t('Professional Bodies'),
		"supervised"			=> t('Supervision'),
		"supervisedfrequency"	=> t('Supervision frequency'),
		"training"				=> t('Training received'),
		"facilitydepartment"	=> t('Facility Departments'),
		"competency"			=> t('Competencies'),
		"occupationalcats"		=> t('Occupational Categories'),
        "chw-person-fields"     => t('CHW Field Labels'),
	);
}

if ( $this->setting['module_employee_enabled'] ) {
	$navAdmin['employee'] = array(
		'index'				      => t('Employees'),
		'settings'          => t('Employee Settings'),
		'category'                => t('Staff Category'),
		'role'                    => t('Primary Role'),
		'transition'              => t('Intended Transitions'),
		'relationship'            => t('Relationship'),
		'referral'                => t('Referral Mechanism'),
		'training-provided'       => t('Training Provided'),
		'partner-importance'=> t('Partner Importance'),
		'partner-funder'          => t('Funder'),
		'mechanism'               => t('Mechanism'),
		'build-funding'           => t('Build Funding'),
	    'mechanism-to-subpartner' => t('Delete Funding')
		
	);
}
?>


<!-- left nav admin navigation -->
<?php


if(! $this->hasACL ('facility_and_person_approver') ) {
	unset( $navAdmin['people']['new-people'] ); // remove approval page links if no ACL of approver
	unset( $navAdmin['facilities']['new-facilities'] );
} else if ( ! $this->setting['module_person_approval'] ) {
	unset( $navAdmin['people']['new-people'] );
} else if ( ! $this->setting['module_facility_approval'] ){
	unset( $navAdmin['facilities']['new-facilities'] );
} else {
	$db = Zend_Db_Table_Abstract::getDefaultAdapter (); // highlight links if theres work here to do for the approver
	$areUnapproved = $db->fetchCol('select 1 from person where approved is null');
	if($areUnapproved)
		$navAdmin['people']['new-people'] .= ' <b>*'.t('New').'*</b>';
	$areUnapprovedFac = $db->fetchCol('select 1 from facility where approved is null');
	if($areUnapprovedFac)
		$navAdmin['facilities']['new-facilities'] .= ' <b>*'.t('New').'*</b>';
}


// Note: $path defined in header.phtml

// Get page title and next page
$parsed_url = parse_url(Settings::$COUNTRY_BASE_URL);
$pathFront = @$parsed_url['path'];
if ( $pathFront )
$path = str_replace($pathFront,'',$_SERVER['REQUEST_URI']);
else
$path = $_SERVER['REQUEST_URI'];
$path = $_SERVER['REQUEST_URI'];

// Strip off URL params if any (will be when debugging in Eclipse)
//$qmarkpos = strpos($path, "?");
//if ($qmarkpos != false) {
//	$path = substr($path, 0, $qmarkpos);
//}

$path = explode('/',$path);

//$path = $_SERVER['REQUEST_URI'];
$page = explode('-',$path[2]);
$page[1] = implode('-', array_slice($page,1)); // allow hyphens



//$page = 'assign-title';
$pageTitle = "";
$nextUri = "";
if(isset($page[1]) && isset($navAdmin[$page[0]][$page[1]])) {
	$pageTitle = $navAdmin[$page[0]][$page[1]];

	// get next array element
	foreach($navAdmin as $dir => $navRay) {
		foreach($navRay as $key => $val) {

			if($dir == $page[0] && $key == $page[1]) {
				$next = next($navRay);
				$rayDir = $dir;
				if(!$next) { // end of array, get next array
					$navRay = current($navAdmin);
					$rayDir = key($navAdmin);
					$next = next($navRay); // skip first element (index)

				}
				$nextUri = $rayDir."-".key($navRay);
				break;
			}
			next($navRay);
		}

	}
}
$sections = array();
$labels = array();

// generate admin navigation
foreach($navAdmin as $dir => $navRay) {


	foreach($navRay as $file => $label) {

		if($dir == 'index' || $file == 'index') {
			$uri = false;
		} else {
			$uri = "$dir-$file";
		}

		if ( !isset($sections[$dir]) ) $sections[$dir] = array();

		if($uri) {
			$isActive = ($path[2] == $uri) ? ' class="active"' : '';
			$sections[$dir][] =	'<li'.$isActive.'><a href="'.($this->base_url).'/admin/'.$uri.'" '.$isActive.'>'.$label."</a>".'</li>';
		} else {
			$labels[$dir] =	$label;
		}

	}

}

echo '<ul>';
foreach($sections as $dir => $s) {
	echo '<li>'.$labels[$dir]."\n".'<ul>'.implode("\n", $s).'</ul>'."\n".'</li>';
}
echo '</ul>';


?>